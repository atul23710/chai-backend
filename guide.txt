first hmne git init krke repo banai usse pacakage.json bna them isko git pe add kiya repo mei push kiya 
phir baaki ki files banai - .gitignore (iske liye kaafi saare generators ate hai online just usme daalo node aur uske liye file ka content generate krke de dega)
phir ek src uske andr -- index.js app.js constants.js
.env aur .env.sample
aur ek public folder -> temp folder -> .gitkeep 

bs ye abhi structure hua hmra 
ab package.json mei add kro "type" : "module" isse hm import use krr payenge 
aur jaise hme koi bhi change kiya backend mei to phir usko wapas se reload krna hota hai to uske liye bhi kuch krna hoga -- we install nodemon for this what it does ? -- it will reload your project once you did any change
    -- npm i -D nodemon (to install it as dev dependency) 
    -- we also have to add "dev": "nodemon src/index.js" to the pacakage.json 
dev dependencies -- ye sb sirf development mei rheti hai production mei ye nhi jaati to inka production mei koi itna effect nhi hota 
abb kuch folders dekhne padenge  -- controllers db middleware models routes utils (utils will have the repeated functionalities)

it is also suggested to install prettier -- as diff people write code in diff style so to keep the consistency -- npm i prettier 
also we have to add some files with the prettier - .prettierrc (check it) and .prettierignore (kisme nhi lgana .env waale mei aur vscode files mei node_modules)

------------------- lecture 8 ---------------------------
we create a account on mongoDB started a free database cluster, added our username and password in the quickstart section and also add the ip 0.0.0.0/0 which allows all the urls to access -- production mei ip bs ek machine ka add kiya jaata hai jha backend/server ho bs whi and we never allow access from anywhere -- we can also do this afterward via database access for username and pass, network access for ip address 
then wo go to database and choose connect so we get a string that will connect the db just we have to replace the password and add that uri to .env file 
there are two ways of database connection -- one - we can add the whole code to connect in hte index itself and then run it there or we can create a seprate file and then import it and then run it
now we need three pacakages -- dotenv, mongoose, express

mongoose se database connect hoga aur kuch imp points - 
    jb bhi database se baat krnge to error aa skti hai means usse try and catch mei wrap kro 
    database is always in another continent -- time lgta hai -- async await lgana hi padega good practice 
    -- ultimately try catch and async await lgana chahiye whenever we talk to database 
the connection is done in index.js file check it out 
the connections two method will be one in index.js and other one is in the db folder 

--------------------------------lecture 9------------------------------
first we add the then and catch statement with the connect_DB 
* we use the app.use() with the middlewares 
now we are going to study about the request and response in the express app
we install cookie-parser and CORS in the project 
in request we majorly study about the -- req.body, req.params, req.cookies

we will first use the cors and configure it in the app.js 
CONFIGURE OPTIONS FOR THE CORS - 
        origin: Configures the Access-Control-Allow-Origin CORS header. Possible values:
            Boolean - set origin to true to reflect the request origin, as defined by req.header('Origin'), or set it to false to disable CORS.
            String - set origin to a specific origin. For example if you set it to "http://example.com" only requests from "http://example.com" will be allowed.
            RegExp - set origin to a regular expression pattern which will be used to test the request origin. If it's a match, the request origin will be reflected. For example the pattern /example\.com$/ will reflect any request that is coming from an origin ending with "example.com".
            Array - set origin to an array of valid origins. Each origin can be a String or a RegExp. For example ["http://example1.com", /\.example2\.com$/] will accept any request from "http://example1.com" or from a subdomain of "example2.com".
            Function - set origin to a function implementing some custom logic. The function takes the request origin as the first parameter and a callback (which expects the signature err [object], allow [bool]) as the second.
        methods: Configures the Access-Control-Allow-Methods CORS header. Expects a comma-delimited string (ex: 'GET,PUT,POST') or an array (ex: ['GET', 'PUT', 'POST']).
        allowedHeaders: Configures the Access-Control-Allow-Headers CORS header. Expects a comma-delimited string (ex: 'Content-Type,Authorization') or an array (ex: ['Content-Type', 'Authorization']). If not specified, defaults to reflecting the headers specified in the request's Access-Control-Request-Headers header.
        exposedHeaders: Configures the Access-Control-Expose-Headers CORS header. Expects a comma-delimited string (ex: 'Content-Range,X-Content-Range') or an array (ex: ['Content-Range', 'X-Content-Range']). If not specified, no custom headers are exposed.
        credentials: Configures the Access-Control-Allow-Credentials CORS header. Set to true to pass the header, otherwise it is omitted.
        maxAge: Configures the Access-Control-Max-Age CORS header. Set to an integer to pass the header, otherwise it is omitted.
        preflightContinue: Pass the CORS preflight response to the next handler.
        optionsSuccessStatus: Provides a status code to use for successful OPTIONS requests, since some legacy browsers (IE11, various SmartTVs) choke on 204

The default configuration (just cors()) is the equivalent of:
    {
    "origin": "*",
    "methods": "GET,HEAD,PUT,PATCH,POST,DELETE",
    "preflightContinue": false,
    "optionsSuccessStatus": 204
    }

this is a example of multiple origin hadled by a function but we can also have some regular expression here using its syntax and we can define more generalized version of origins
    var whitelist = ['http://example1.com', 'http://example2.com']
    var corsOptions = {
    origin: function (origin, callback) {
        if (whitelist.indexOf(origin) !== -1) {
        callback(null, true)
        } else {
        callback(new Error('Not allowed by CORS'))
        }
    }
    }

i am unable to understand the preflight in the cors try to understand it some other times 
//app.use() is a method used to mount middleware functions
//Middleware functions have access to the request and response objects and can execute code before, during, or after a route handler.
app mei configure kiya ki kasie kasie data ko lena hai aur cookieparse ko configure kiya 

next middleware ke baare mei thoda si charcha -- 
    we hit the route/url with the app.get - /instagram  so now we tell ki is url pe ayy to kya karo with that (req,res) => {inside we tell ki kya karna like res.json / res.send}
    now this is simple ki mere paas ek request ayyi aur maine handle krke bhejdiya but if i want to add some checks in between like ki jo user hai wo login hai ki nhi or admin hai ki nhi to wo check krne ke liye we use middlewares 
    /instagram -- middleware1 -- middleware2 -- etc -- (err, req, res, next)=>{}
    this is the sequence we write it in sequence and it also checks it in sequence(wo syntax aage dekhnge), also to handle yha pe 4 fields hote hai err is ki koi err hua to, req is the request, res jo send krnge, next flag is basically for middleware ki hmne check krliya now next pe jao aur end mei jb wo funtion pe ata hai to res hi send ho jaata hai to next flag discard ho jaata hai 

now hmme database se to bht baat krni padegi and hr baar try catch bhi use krna hoga aur async await bhi to hr baar pura likhne se accha hai ki ek utility hi bana lu mai iski -- asyncHandler -- ye bhi two methods hai banane ke first is using try catch second promise se
but also hmme error bhi hrr bhi handle krna hai and for consistency hm chahenge ki hmra error hrr baar same dikhe taaki -- same dikhe se mtlb hai ki structure same ho -- status bheja, success, message and all kis format mei wo defined ho uske liye do to -- nodejs api error (google) -- for this we make ApiError.js in util and we extend the error class there and define it
same thing we do with response -- ApiResponse.js -- but response is in core express so we can't have that class and we extending it 
we have use statusCode inside them which is - 
    HTTP response status codes indicate whether a specific HTTP request has been successfully completed. Responses are grouped in five classes:
    Informational responses (100 – 199)
    Successful responses (200 – 299)
    Redirection messages (300 – 399)
    Client error responses (400 – 499)
    Server error responses (500 – 599)

    ie we can conclude that statusCode < 400 is a response and above that is error 

------------------------- lecture 10 --------------------------------
User and video model with hooks and JWT
-- model of our project is given on the github of the chai-aur-backend series github repo -- https://app.eraser.io/workspace/YtPqZ1VogxGy1jzIDkzj
so using that as refrence we are going to create the models

we make the user and video model 
now we are going to use mongoose-aggregate-paginate-v2 to add aggregate pipeline 
//install it then to use it -- what it do we'll see 
syntax - 
    var mongoose = require("mongoose");
    var aggregatePaginate = require("mongoose-aggregate-paginate-v2");

    var mySchema = new mongoose.Schema({
    /* your schema definition */
    });

    mySchema.plugin(aggregatePaginate);

    var myModel = mongoose.model("SampleModel", mySchema);

now we are going to use "bcrypt" in our project, install it as well -- it helps to hash our password ki password add to kre but wo show na ho 
and also we use jsonwebtoken / jwt it helps us to create tokens -- it will encrypt the data -- go to jwt.io to read the token how it works -- it works like it have some headers, then payload (where our main data is), and then secret base(it make the token unique )

we used a middleware use to encrypt the password everytime it is updated in the user model check it out 
and then we also added some methods to the schema --to check if password is correct, then we added the secret and expiry of refersh token and access token in .env file

now we create some more method to generate these access and refresh token (both of them are jwt token), jwt.sign allow us to generate token 
so we totally till now created three methods in user 
and added aggregation pipeline in video 

-------------------------lecture 11--------------------------------
how to upload file in backend , today file handling is not done much on our own server we use third party service for that 
better practice is -- we create the utility for this handligng thrgh which we can handle images, files whatever we want, and this is very reuseable code, and wherever we want we can use it as a middleware

what we are going to use : cloudinary, express fileupload or multer(in this we use multer), 
our strategy is - hm user se file ko lenge using multer and apne local server pe rhkhnge temporarly and then usko cloudinary pe upload krnge from local server -- ye kiya kyu jaata hai taaki hmre server pe file aagyi hai to hm usse reattempt kr paay taaki reupload ka chance rhe 
so hmne utility mei ek cloudinary naam se file banai - jao uske andr 

now we are going to make a middleware with the use of multer -- to use multer also read its docs -- file storage it in disk storage 

----------------------------lecture 12--------------------------------
http crash course -- hyper text transfer protocol (whi hai ki text ko kaise transfer krre)
https -- diff between http and https is -- in http if we send data as 123 then it will be recieved as 123 but in https it adds some layer of encryption to the data and the data is not decodeable in b/w 
URL - uniform resource locator 
URI - uniform resource identifier
URN - uniform resource name 

inside notes 
----------------------------lecture 13-----------------------------------
abb controllers likhna shuru krnge from now on logic hi logic --
first hmne userregistration ke liye kiya hai to 
we created a user.controller.js and user.routes.js to handle the userregistration now we want to import all that so we do import all that at app.js as we want our index.js file to be clean 
we did importing and declaration of routes in app.js-- after this we write code for the user.routes.js ki kya karna hai now after this we will try to run our app and debug things 

-----------------------------lecture 14---------------------------------
logic building - register controller 
now for registering user we have to do first build the logic and what we are going to do so first do that
registering user - 
    * get user details from frontend (although hmre project mei front end nhi hai but we will use postman for that)
    * validation - simplest - not empty and other validations on input 
    * check if user alreaady exists or not - via email, username (which on is unique can use that)
    * check for images, check for avatar
    * upload them to cloudinary
    * create user object - create entry in db
    * now we get response from db (of what we have stored) so remove password and refresh token from response
    * check for user creation - user create hua ki nhi and response empty hai ya kya
    *return response
now this is real world project logic building 
form ya direct json data aa rha hai to usse hm req.body se access kr skte hai for url there is something other -- so we have done all this registration process in the user.controller.js 
-------------------------lecture 15----------------------------------
setting up postman for backend -- debugging the code 
to setup postman create a collection add the post req to it for our url and provide field to it 
we also add environment variable for the repeated part of url - http://localhost:8000/api/v1 part also share it to our collection thenwe can use it as {{variable_name}}/users/register like this
 -----------------------------lecture 16-------------------------------
 access token and refresh token -- access tokens are generally short lived and refresh tokens are long lived 
        🧠 Imagine This First:
        You’re visiting a building with security. The building has secure rooms. You walk in, show your ID, and they give you:
        🪪 Access Card (access token) — opens doors to rooms for 15 minutes

        🔁 VIP Pass (refresh token) — if your access card expires, show this at the front desk and get a new one without showing ID again

        This is exactly how authentication with access and refresh tokens works in the backend.

        🏛️ How Web Apps Work (without tokens)
        You log in with username & password

        Server verifies them, and marks you as "logged in" by:

        Storing your login status on the server

        Giving you a session ID (like a key)

        But…

        ❌ Problem:
        Session-based systems store your state on the server — doesn't scale well with millions of users

        Requires you to keep checking session status from a database

        ✅ Token-based System (Stateless)
        Now we use tokens, especially JWT (JSON Web Tokens):

        A token is just a piece of text that contains proof you’re logged in

        The server signs it to ensure it can’t be faked

        The token contains user data like:

        json
        Copy
        Edit
        {
        "userId": "123",
        "role": "admin",
        "exp": 168978123
        }
        🔐 Access Token — What is it?
        It’s like a temporary pass saying:

        “This person is verified. Allow them to access secure stuff for the next 15 minutes.”

        Short lifespan (e.g., 15 min)

        Sent by frontend with every protected API request

        If it’s valid → backend allows access

        If expired → ❌ backend says "Unauthorized"

        🔄 Refresh Token — What is it?
        It’s like a backup key saying:

        “I am still who I say I am — please give me a new access token without logging in again.”

        Long lifespan (e.g., 7 days or more)

        Stored securely (usually in HTTP-only cookies)

        Used only when the access token expires

        If valid → backend gives you a new access token

        ✅ Full Authentication Flow with Access & Refresh Tokens
        1️⃣ Login
        You send email & password → Backend verifies

        Backend responds with:

        ✅ accessToken (expires in 15 min)

        🔁 refreshToken (expires in 7 days)

        2️⃣ Accessing Protected APIs
        Frontend calls:

        http
        Copy
        Edit
        GET /user/profile
        Authorization: Bearer <accessToken>
        Backend:

        Checks if token is not expired

        If valid → gives data

        If expired → responds with 401 Unauthorized

        3️⃣ Refreshing Token (No Login Again)
        Frontend sees 401 Unauthorized, so it does:

        http
        Copy
        Edit
        POST /refresh-token
        (with refreshToken from secure cookie)
        Backend:

        Verifies refresh token

        If valid → creates a new access token

        Frontend stores it and retries the original request

        4️⃣ Logout
        Frontend clears both tokens

        Backend optionally blacklists the refresh token (for extra safety)

        🧪 Let’s simulate this in plain English
        Example:
        You log in → receive:

        accessToken: “valid for 15 min”

        refreshToken: “valid for 7 days”

        ⏱️ 10 minutes later:

        You fetch profile → accessToken works

        ⏱️ 20 minutes later:

        You fetch again → accessToken expired

        Your frontend sends the refreshToken → gets a new accessToken

        You never had to log in again manually.

        🧰 Why Not Just One Token?
        If you only used access tokens:

        You’d either expire them fast (secure) but annoy the user

        Or keep them long-lived (convenient) but risky if stolen

        Refresh tokens fix this tradeoff:

        Access token = safe & short

        Refresh token = safe backup (if stored securely)

        🧱 3. Typical Auth Flow Using Access + Refresh Tokens
        🧾 Step-by-step flow:
        🟢 A. User Logs In
        ✅ User sends credentials (email, password)

        🔐 Server verifies them

        ✅ Server generates:

        Access Token (short-lived, e.g. 15min)

        Refresh Token (long-lived, e.g. 7 days)

        Server sends both tokens to the frontend

        Access Token → usually stored in memory or cookie

        Refresh Token → stored in HTTP-only cookie (safer from XSS)

        🟡 B. User Accesses Protected Routes
        🚀 Frontend sends access token in headers:

        http
        Copy
        Edit
        Authorization: Bearer <access_token>
        ✅ Backend verifies token and responds

        If token is valid:

        🎉 Access granted

        If token is expired:

        ❌ Backend says: "Token expired"

        🔁 C. Token Refresh (Auto re-login)
        Frontend detects expired access token

        It sends a request to /refresh-token endpoint

        Server:

        Validates refresh token

        If valid → issues new access token (and optionally new refresh token)

        Frontend stores new token, retries the original request

        🔴 D. Logout
        Frontend clears both tokens (memory, cookies)

        Server can invalidate refresh token (e.g. blacklist in DB)

        ⚙️ 4. How to implement this in Node.js (with JWT)
        🛠 Generate Tokens
        js
        Copy
        Edit
        const jwt = require("jsonwebtoken");

        const generateAccessToken = (user) => {
        return jwt.sign(user, process.env.ACCESS_SECRET, { expiresIn: "15m" });
        };

        const generateRefreshToken = (user) => {
        return jwt.sign(user, process.env.REFRESH_SECRET, { expiresIn: "7d" });
        };
        ✅ Login Route Example
        js
        Copy
        Edit
        app.post('/login', (req, res) => {
        const user = { id: "123", role: "admin" }; // normally from DB

        const accessToken = generateAccessToken(user);
        const refreshToken = generateRefreshToken(user);

        // Send access token in body
        // Send refresh token in HTTP-only cookie
        res.cookie('refreshToken', refreshToken, {
            httpOnly: true,
            secure: true,
            sameSite: 'strict'
        });

        res.json({ accessToken });
        });
        🔒 Middleware to Protect Routes
        js
        Copy
        Edit
        function authenticateToken(req, res, next) {
        const authHeader = req.headers['authorization'];
        const token = authHeader && authHeader.split(' ')[1];

        if (!token) return res.sendStatus(401);

        jwt.verify(token, process.env.ACCESS_SECRET, (err, user) => {
            if (err) return res.sendStatus(403); // token invalid
            req.user = user;
            next();
        });
        }
        🔁 Refresh Token Endpoint
        js
        Copy
        Edit
        app.post('/refresh-token', (req, res) => {
        const refreshToken = req.cookies.refreshToken;
        if (!refreshToken) return res.sendStatus(401);

        jwt.verify(refreshToken, process.env.REFRESH_SECRET, (err, user) => {
            if (err) return res.sendStatus(403);

            const newAccessToken = generateAccessToken({ id: user.id, role: user.role });
            res.json({ accessToken: newAccessToken });
        });
        });
        📦 Storage Suggestions
        Token	Where to store	Why
        Access Token	Memory, localStorage*, etc	Needed often, but short-lived
        Refresh Token	HTTP-only cookie	Safer — cannot be accessed by JS

        *localStorage is okay for learning/dev, but not safe in production

now we will write the code for controller of login and logout in the same user.controller.js file 
when writing the logout we also write a middleware auth.middleware.js -- we write this middleware coz we want to get the access of userid or other in the logout coz we dont have any way so what we will do is we will add a field user to the req and then from that we will take the value 
that's why we use middleware ye req bhejne se phale usme add kr dega so we can use it in logout but ye hm middleware inject krte hai routes mei 
we add routes for login and logout -- adding the middleware to it

------------------------------lecture 17---------------------------------
if you want to access the values in mongoDB then go the cluster and then to the collection
debugging - phala access token ka naam glttha cookie mei to wo nikal nhi paa rha tha usse cookie se -- also i have swapped the name of access token and refresh token that's causing the error -- console log to check where the actual error happen
now we are going to use the config the access token and the refresh token as we want to generate a access token and the refresh token which is stored in teh database(refreshToken) and login the user but once access token expires then the user become unauthorized and frontend throws a error that the session is expired but what we can do instead of showing a error we can do is say it hit an endpoint(API) where we check for the refersh token and if the refresh token we have(we send with the req) and in the database are same then we will generate a new access token and new refresh token, if refreshToken is not matched then we say user to login again -- this is what we are going to do 

create functn refreshAccessToken in the user controller

        🔐 What is jwt.verify()?
        The jwt.verify() method is part of the jsonwebtoken package in Node.js.
        It is used to verify the authenticity of a JSON Web Token (JWT).

        ✅ Its Main Purpose:
        Verify that the token is valid and hasn’t been tampered with.

        Decode the payload inside the token.

        Throw error if:

        The token is expired

        The signature is invalid

        The token is malformed

        Secret key doesn't match

        ✅ Syntax
        js
        Copy
        Edit
        const decoded = jwt.verify(token, secretOrPublicKey);
        You can also pass additional options or a callback, but let’s focus on the basic usage first.

        🧠 What does it return?
        It returns the decoded payload (the original data you embedded when the token was created using jwt.sign()).

        Example:
        Suppose you signed a token like this:

        js
        Copy
        Edit
        const token = jwt.sign(
        { _id: "123", role: "admin" },  // <-- Payload
        "mysecretkey",                  // <-- Secret
        { expiresIn: "1h" }
        );
        Then, when you verify it:

        js
        Copy
        Edit
        const decoded = jwt.verify(token, "mysecretkey");
        console.log(decoded);
        Output:
        js
        Copy
        Edit
        {
        _id: "123",
        role: "admin",
        iat: 1723452342,     // issued at (timestamp)
        exp: 1723455942      // expiration time (timestamp)
        }

